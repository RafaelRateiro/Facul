#include <stdio.h>

#define TAM 10
#define NAVIO 3
#define TAM_NAVIO 3

// Função para verificar se o navio pode ser colocado nas posições desejadas
int podeColocarNavio(int tabuleiro[TAM][TAM], int linha, int coluna, int direcao, int diagonal) {
    for (int i = 0; i < TAM_NAVIO; i++) {
        int l = linha + (diagonal ? i * direcao : (direcao == 1 ? i : 0));
        int c = coluna + (diagonal ? i : (direcao == 2 ? i : 0));
        if (l < 0 || l >= TAM || c < 0 || c >= TAM || tabuleiro[l][c] != 0) {
            return 0; // posição inválida
        }
    }
    return 1;
}

// Função para posicionar o navio no tabuleiro
void posicionarNavio(int tabuleiro[TAM][TAM], int linha, int coluna, int direcao, int diagonal) {
    for (int i = 0; i < TAM_NAVIO; i++) {
        int l = linha + (diagonal ? i * direcao : (direcao == 1 ? i : 0));
        int c = coluna + (diagonal ? i : (direcao == 2 ? i : 0));
        tabuleiro[l][c] = NAVIO;
    }
}

// Função para exibir o tabuleiro
void exibirTabuleiro(int tabuleiro[TAM][TAM]) {
    printf("Tabuleiro Batalha Naval 10x10:\n");
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int tabuleiro[TAM][TAM] = {0};

    // Navios horizontais/verticais
    if (podeColocarNavio(tabuleiro, 0, 0, 1, 0)) // vertical
        posicionarNavio(tabuleiro, 0, 0, 1, 0);

    if (podeColocarNavio(tabuleiro, 5, 2, 2, 0)) // horizontal
        posicionarNavio(tabuleiro, 5, 2, 2, 0);

    // Navios diagonais
    if (podeColocarNavio(tabuleiro, 2, 2, 1, 1)) // diagonal principal
        posicionarNavio(tabuleiro, 2, 2, 1, 1);

    if (podeColocarNavio(tabuleiro, 6, 6, -1, 1)) // diagonal invertida
        posicionarNavio(tabuleiro, 6, 6, -1, 1);

    // Exibe o tabuleiro final
    exibirTabuleiro(tabuleiro);

    return 0;
}
